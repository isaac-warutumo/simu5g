//
// Generated file, do not edit! Created by opp_msgtool 6.0 from inet/applications/voipstream/VoipStreamPacket.msg.
//

#ifndef __INET_VOIPSTREAMPACKET_M_H
#define __INET_VOIPSTREAMPACKET_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class VoipStreamPacket;

}  // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

// cplusplus {{
#ifndef HAVE_FFMPEG
#error Please install libavcodec, libavformat, libavutil or disable 'VoipStream' feature.
#endif
// }}


namespace inet {

/**
 * Enum generated from <tt>inet/applications/voipstream/VoipStreamPacket.msg:23</tt> by opp_msgtool.
 * <pre>
 * //
 * // For the type field of VoIPPacket
 * //
 * enum VoipStreamPacketType
 * {
 *     VOICE = 1;
 *     SILENCE = 2;
 * }
 * </pre>
 */
enum VoipStreamPacketType {
    VOICE = 1,
    SILENCE = 2
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const VoipStreamPacketType& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, VoipStreamPacketType& e) { int n; b->unpack(n); e = static_cast<VoipStreamPacketType>(n); }

/**
 * Class generated from <tt>inet/applications/voipstream/VoipStreamPacket.msg:32</tt> by opp_msgtool.
 * <pre>
 * //
 * // Packet type used by VoIPSourceApp and VoIPSinkApp
 * //
 * class VoipStreamPacket extends FieldsChunk
 * {
 *     short headerLength = 0;     // from voipHeaderSize parameter
 *     VoipStreamPacketType type;
 *     int codec;  // FFmpeg identifier of the codec
 *     short sampleBits;
 *     int sampleRate;
 *     int transmitBitrate;
 *     int samplesPerPacket;
 * 
 *     uint16_t seqNo; // packet sequence number
 *     uint32_t timeStamp; // increased with every packet
 *     uint32_t ssrc;  // currently unused
 * 
 *     uint16_t dataLength;
 * }
 * </pre>
 */
class INET_API VoipStreamPacket : public ::inet::FieldsChunk
{
  protected:
    short headerLength = 0;
    VoipStreamPacketType type = static_cast<inet::VoipStreamPacketType>(-1);
    int codec = 0;
    short sampleBits = 0;
    int sampleRate = 0;
    int transmitBitrate = 0;
    int samplesPerPacket = 0;
    uint16_t seqNo = 0;
    uint32_t timeStamp = 0;
    uint32_t ssrc = 0;
    uint16_t dataLength = 0;

  private:
    void copy(const VoipStreamPacket& other);

  protected:
    bool operator==(const VoipStreamPacket&) = delete;

  public:
    VoipStreamPacket();
    VoipStreamPacket(const VoipStreamPacket& other);
    virtual ~VoipStreamPacket();
    VoipStreamPacket& operator=(const VoipStreamPacket& other);
    virtual VoipStreamPacket *dup() const override {return new VoipStreamPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual short getHeaderLength() const;
    virtual void setHeaderLength(short headerLength);

    virtual VoipStreamPacketType getType() const;
    virtual void setType(VoipStreamPacketType type);

    virtual int getCodec() const;
    virtual void setCodec(int codec);

    virtual short getSampleBits() const;
    virtual void setSampleBits(short sampleBits);

    virtual int getSampleRate() const;
    virtual void setSampleRate(int sampleRate);

    virtual int getTransmitBitrate() const;
    virtual void setTransmitBitrate(int transmitBitrate);

    virtual int getSamplesPerPacket() const;
    virtual void setSamplesPerPacket(int samplesPerPacket);

    virtual uint16_t getSeqNo() const;
    virtual void setSeqNo(uint16_t seqNo);

    virtual uint32_t getTimeStamp() const;
    virtual void setTimeStamp(uint32_t timeStamp);

    virtual uint32_t getSsrc() const;
    virtual void setSsrc(uint32_t ssrc);

    virtual uint16_t getDataLength() const;
    virtual void setDataLength(uint16_t dataLength);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const VoipStreamPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, VoipStreamPacket& obj) {obj.parsimUnpack(b);}


}  // namespace inet


namespace omnetpp {

template<> inline inet::VoipStreamPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::VoipStreamPacket*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __INET_VOIPSTREAMPACKET_M_H

